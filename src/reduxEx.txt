// index.html ///////////////////
<!Doctype html>
<html>
  <head>
  ...
  </head>
  <body>
    <h1 id="number">0</h1>
    <button id="increment"> + </button>
    <button id="decrement"> - </button>
    <script src="..../redux.js"></script>
  </body>
</html>

// script ////////////////////////

// DOM 요소 가져오기 
const h1Tag = document.getElementById("number"); 
const incrementBtn = document.getElementById("increment"); 
const decrementBtn = document.getElementById("decrement");

// 액션 타입 정의 
const INCREMENT = "INCREMENT"; 
const DECREMENT = "DECREMENT"; 

// 액션 객체를 만들어주는 액션크리에이터 (함수) 
const increment = (payload) => ({type: INCREMENT, payload});
const decrement = () => ({type: DECREMENT}); 

// 초기값 설정 
const initialState = {
  number: 0
}

// 리듀서 함수 : state, action 파라미터 받고 처리해서, 새 state값 정의해 리턴 
const counter = (state = initialState, action) => {
  switch(action.type) {
    case INCREMENT:
      return {
        number: state.number + action.payload
      }
    case DECREMENT:
      return {
        number: state.number - 1
      }
    default:
      return state; 
  }
}

// 스토어 생성 : 리듀서 주면서 생성 
const { createStore } = Redux; 
const store = createStore(counter);  

// 상태값이 변경될때마다 호출시킬 listner 함수 
const render = () => {
  h1Tag.innerText = store.getState().number; 
}

// listner함수 주면서 스토어 구독처리. number 상태값이 변경되는 render가 실행 
store.subscribe(render); 

// 초기렌더링을 위해, 직접 reder() 실행 
render(); 

// 버튼에 이벤트 등록 
incrementBtn.addEventListener("click", () => {
  store.dispath(increment(20)); // dispatch({type:INCREMENT, payload:20})
});
decrementBtn.addEventListener("click", () => {
  store.dispath(decrement()); // dispatch({type:DECREMENT})
});


